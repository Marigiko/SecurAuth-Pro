import { useState, useContext } from 'react';
import { Box, Button, Typography, Grid, TextField } from '@mui/material';
import { DataUserContext } from '../context/DataUserContext';

const AuthToken = () => {
  const [otp, setOtp] = useState(['', '', '', '', '', '']); // Estado para almacenar los valores de los campos OTP
  const [isValidated, setIsValidated] = useState(false); // Estado para manejar la validación
  const { qrCodeKey, setQRCodeKey } = useContext(DataUserContext);

  const handleChange = (index, value) => {
    const updatedOtp = [...otp];
    updatedOtp[index] = value;
    setOtp(updatedOtp);
  };

  const handleVerify = () => {
    const otpValue = otp.join(''); // Concatenar los valores de los campos OTP
    const key = qrCodeKey; // Reemplaza con tu clave secreta

    // Realizar una solicitud POST al backend para verificar el token
    fetch('http://localhost:8000/api/auth/two_auth_token', {
      method: 'POST',
      body: JSON.stringify({ key, token: otpValue }),
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.validated) {
          setIsValidated(true);
        } else {
          setIsValidated(false);
          // Puedes mostrar un mensaje de error aquí si lo deseas
          console.error('Token no válido');
        }
      })
      .catch((error) => {
        console.error('Error al verificar el token:', error);
      });
  };

  return (
    <Box
      sx={{
        width: '70%',
        height: '70%',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        gap: '2rem',
      }}
    >
      <Typography
        variant='h4'
        sx={{
          textAlign: 'center',
        }}
      >
        Please enter the One Time Password (OTP) generated by your Microsoft
        Authenticator App.
      </Typography>
      <Box
        sx={{
          width: '100%',
        }}
      >
        <Grid container spacing={1}>
          {otp.map((value, index) => (
            <Grid item xs={2} key={index}>
              <TextField
                hiddenLabel
                variant='outlined'
                value={value}
                onChange={(e) => handleChange(index, e.target.value)}
                inputProps={{
                  maxLength: 1,
                  inputMode: 'numeric',
                }}
              />
            </Grid>
          ))}
        </Grid>
      </Box>
      <Button
        variant='contained'
        sx={{
          width: '30%',
          height: '45px',
          fontWeight: '700',
          fontSize: '20px',
          textTransform: 'capitalize',
        }}
        onClick={handleVerify}
      >
        Verify
      </Button>
      {isValidated && (
        <Typography
          variant='h5'
          sx={{
            textAlign: 'center',
            color: 'green',
            marginTop: '1rem',
          }}
        >
          Token Validated Successfully
        </Typography>
      )}
    </Box>
  );
};

export default AuthToken;
